{"version":3,"sources":["components/Hen.js","components/Row.js","components/Table.js","components/Error.js","App.js","serviceWorker.js","index.js"],"names":["Hen","n","setN","className","type","name","id","value","onChange","e","target","Row","rList","map","rl","key","Table","rowMul","nPrimes","list","index","np","Error","error","maxValue","Object","keys","er","isPrime","num","divisor","App","useState","setNPrimes","start","setError","useEffect","newPrimes","nError","currNum","length","push","zero","exceptions","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"8OAoBeA,EAlBH,SAAC,GAAiB,IAAfC,EAAc,EAAdA,EAAGC,EAAW,EAAXA,KAGhB,OACE,yBAAKC,UAAU,YACb,0CACA,2BACEC,KAAK,OACLC,KAAK,WACLC,GAAG,WACHC,MAAON,EAAEM,MACTC,SAVe,SAAAC,GAAC,OAAIP,EAAK,CAAEK,MAAOE,EAAEC,OAAOH,SAW3CJ,UAAU,mB,OCAHQ,EAZH,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,MAAOT,EAAgB,EAAhBA,UACpB,OACE,yBAAKA,UAAWA,GACbS,EAAMC,KAAI,SAAAC,GAAE,OACX,4BAAQX,UAAU,OAAOY,IAAKD,GAC3BA,QCkBIE,EAtBD,SAAC,GAAiB,IAC1BC,EADWC,EAAc,EAAdA,QAGf,OACE,yBAAKf,UAAU,eACb,kBAAC,EAAD,CAAKS,MAAK,CAAG,IAAH,mBAAUM,IAAUf,UAAU,0BACxC,6BACGe,EAAQL,KAAI,SAACM,EAAMC,GAElB,OADAH,EAASC,EAAQL,KAAI,SAAAQ,GAAE,OAAIA,EAAKF,KAE9B,kBAAC,EAAD,CACEJ,IAAKK,EACLR,MAAK,CAAGO,GAAH,mBAAYF,IACjBd,UAAWiB,EAAQ,IAAM,EAAI,UAAY,mBCCxCE,EAfD,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACtB,OACE,yBAAKrB,UAAU,SACZsB,OAAOC,KAAKH,GAAOV,KAAI,SAACc,EAAIP,GAAL,OACtB,yBAAKL,IAAKK,GAAQG,EAAMI,OAEzBJ,EAAK,OACJ,yBAAKpB,UAAU,aAAf,oBAA6CqB,GAE7C,KCHFI,G,MAAU,SAAAC,GACd,GAAIA,EAAM,EAAG,OAAO,EACpB,GAAY,IAARA,EAAW,OAAO,EAEtB,IADA,IAAIC,EAAU,EACPA,EAAUA,GAAWD,GAC1B,GAAIA,EAAMC,MAAc,EAAG,OAAO,EAEpC,OAAO,IAgDMC,MA7Cf,WAAgB,IAAD,EACKC,mBAAS,CAAEzB,MAAO,KADvB,mBACNN,EADM,KACHC,EADG,OAEiB8B,mBAAS,IAF1B,mBAENd,EAFM,KAEGe,EAFH,OAGGD,mBAAS,GAAlBE,EAHM,sBAIMF,mBAAS,IAArBR,EAJM,sBAKaQ,mBAAS,IALtB,mBAKNT,EALM,KAKCY,EALD,KA8Bb,OAvBAC,qBAAU,WACR,IACE,IAAMC,EAAY,GAClB,GAAIpC,EAAEM,MAAQiB,EACZW,EAAS,CAAEG,OAAO,gBAAD,OAAkBd,SAC9B,CACLW,EAAS,CAAEG,OAAQ,KAGnB,IAFA,IAAIC,EAAUL,EAEPG,EAAUG,OAASvC,EAAEM,OACtBqB,EAAQW,IACVF,EAAUI,KAAKF,KAEfA,EAEJN,EAAWI,GACc,IAArBA,EAAUG,QAAcL,EAAS,CAAEO,KAAM,yBAE/C,MAAOjC,GACP0B,EAAS,CAAEQ,WAAYlC,OAExB,CAACR,EAAEM,MAAO2B,EAAOV,IAGlB,oCACE,2CACA,kBAAC,EAAD,CAAKvB,EAAGA,EAAGC,KAAMA,IACjB,0BAAMC,UAAU,OACboB,EAAMe,QAAUf,EAAMmB,KACrB,kBAAC,EAAD,CAAOnB,MAAOA,EAAOC,SAAUA,IAE/B,kBAAC,EAAD,CAAON,QAASA,OC5CN0B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.bb503929.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Hen = ({ n, setN }) => {\n  const handleChange = e => setN({ value: e.target.value });\n\n  return (\n    <div className=\"select-n\">\n      <label>For n =</label>\n      <input\n        type=\"text\"\n        name=\"select-n\"\n        id=\"select-n\"\n        value={n.value}\n        onChange={handleChange}\n        className=\"form-control\"\n      />\n    </div>\n  );\n};\n\nexport default Hen;\n","import React from \"react\";\n\nconst Row = ({ rList, className }) => {\n  return (\n    <div className={className}>\n      {rList.map(rl => (\n        <button className=\"nrow\" key={rl}>\n          {rl}\n        </button>\n      ))}\n    </div>\n  );\n};\n\nexport default Row;\n","import React from \"react\";\nimport Row from \"./Row\";\n\nconst Table = ({ nPrimes }) => {\n  let rowMul;\n\n  return (\n    <div className=\"prime-table\">\n      <Row rList={[\"\", ...nPrimes]} className=\"odd-row border-bottom\" />\n      <div>\n        {nPrimes.map((list, index) => {\n          rowMul = nPrimes.map(np => np * list);\n          return (\n            <Row\n              key={index}\n              rList={[list, ...rowMul]}\n              className={index % 2 !== 0 ? \"odd-row\" : \"even-row\"}\n            />\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nexport default Table;\n","import React from \"react\";\n\nconst Error = ({ error, maxValue }) => {\n  return (\n    <div className=\"error\">\n      {Object.keys(error).map((er, index) => (\n        <div key={index}>{error[er]}</div>\n      ))}\n      {error[\"nError\"] ? (\n        <div className=\"error-adv\">Try values below {maxValue}</div>\n      ) : (\n        \"\"\n      )}\n    </div>\n  );\n};\n\nexport default Error;\n","import React, { useState, useEffect } from \"react\";\nimport Hen from \"./components/Hen\";\nimport Table from \"./components/Table\";\nimport Error from \"./components/Error\";\n\nimport \"./App.css\";\n\n// Returns true if prime number, otherwise return false\nconst isPrime = num => {\n  if (num < 2) return false;\n  if (num === 2) return true;\n  let divisor = 2;\n  while (divisor * divisor <= num) {\n    if (num % divisor++ === 0) return false;\n  }\n  return true;\n};\n\nfunction App() {\n  const [n, setN] = useState({ value: 10 }); // how many primes\n  const [nPrimes, setNPrimes] = useState([]); // the primes you asked for\n  const [start] = useState(2); // would you want to specify a start value in the future?\n  const [maxValue] = useState(25); // let's not generate beyond this number of primes\n  const [error, setError] = useState(\"\"); // this keep tracks of the errors\n\n  useEffect(() => {\n    try {\n      const newPrimes = [];\n      if (n.value > maxValue) {\n        setError({ nError: `Greater than ${maxValue}` });\n      } else {\n        setError({ nError: \"\" });\n        let currNum = start;\n\n        while (newPrimes.length < n.value) {\n          if (isPrime(currNum)) {\n            newPrimes.push(currNum);\n          }\n          ++currNum;\n        }\n        setNPrimes(newPrimes);\n        if (newPrimes.length === 0) setError({ zero: \"No primes are found\" });\n      }\n    } catch (e) {\n      setError({ exceptions: e });\n    }\n  }, [n.value, start, maxValue]);\n\n  return (\n    <>\n      <h1>Prime Table</h1>\n      <Hen n={n} setN={setN} />\n      <main className=\"App\">\n        {error.nError || error.zero ? (\n          <Error error={error} maxValue={maxValue} />\n        ) : (\n          <Table nPrimes={nPrimes} />\n        )}\n      </main>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}